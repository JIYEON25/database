SELECT last_name, job_id, department_id
FROM employees
WHERE last_name = 'Whalen';

SELECT last_name, job_id, hire_date
FROM employees
WHERE hire_date = '14/11/16';


SELECT last_name, salary
FROM employees
WHERE salary <= 3000;

SELECT last_name, salary
FROM employees
WHERE salary BETWEEN 2500 AND 3500;

SELECT employee_id, last_name, salary, manager_id
FROM employees
WHERE manager_id IN (100,101,201);

SELECT employee_id, last_name, salary, hire_date, department_id
FROM employees
WHERE department_id IN (60,80,null);

SELECT last_name,employee_id, manager_id, department_id
FROM employees
WHERE last_name IN ('Hartstein', 'Vargas');

SELECT first_name
FROM employees
WHERE first_name LIKE 'S%';

SELECT * FROM employees;

SELECT last_name
FROM employees
WHERE last_name LIKE '_o%';

SELECT employee_id, last_name, job_id
FROM employees
WHERE job_id LIKE '%SA\_%;' ESCAPE '\';

SELECT last_name, manager_id
FROM employees
WHERE manager_id IS NULL;

SELECT employee_id, last_name, job_id, salary
FROM employees
WHERE salary >= 10000
AND job_id LIKE '%MAN%';

SELECT employee_id, last_name, job_id, salary
FROM employees
WHERE salary >= 10000
OR job_id LIKE '%MAN%';

SELECT last_name, job_id
FROM employees
WHERE job_id 
NOT IN ('IT_PROG','ST_CLERK','SA_REP');


SELECT last_name, job_id, salary
FROM employees
WHERE job_id = 'SA_REP'
OR job_id = 'AD_PRES'
AND salary > 15000;

SELECT last_name, job_id, salary
FROM employees
WHERE (job_id = 'SA_REP'
OR job_id = 'AD_PRES')
AND salary > 15000;


-- UNION 두 결과의 중복을 제거한 후 한번씩만 표시 + 오름차순
SELECT employee_id, job_id
FROM employees
UNION
SELECT employee_id, job_id
FROM job_history;

-- UNION ALL 중복을 제거하지 않음. 정렬을 해주지않음.
SELECT employee_id, job_id
FROM employees
UNION ALL
SELECT employee_id, job_id
FROM job_history
-- 그래서 이거 추가
ORDER BY employee_id;

-- INTERSECT 공통적인 행 반환
SELECT employee_id, job_id
FROM employees
INTERSECT
SELECT employee_id, job_id
FROM job_history;

-- MINUS 공통적인 행을 빼고 반환
SELECT employee_id, job_id FROM employees
MINUS
SELECT employee_id, job_id FROM job_history;

-- 표현식의 갯수가 다르고 숫자열의 경우, 상수를 지정.
SELECT employee_id, job_id, salary
FROM employees
UNION 
SELECT employee_id, job_id, -1
FROM job_history;

-- DESC 내림차순
SELECT last_name, job_id, department_id, hire_date
FROM employees
ORDER BY hire_date DESC;

-- SELECT 목록에 없는 열을 기준으로도 정렬 가능.
SELECT last_name, department_id, salary
FROM employees
ORDER BY department_id, salary DESC;

-- 별칭지정
SELECT employee_id, last_name, salary*12 ann_sal
FROM employees
ORDER BY ann_sal;

-- Position Number 이용 가능.
SELECT last_name, department_id, salary
FROM employees
ORDER BY 2,3 DESC;




